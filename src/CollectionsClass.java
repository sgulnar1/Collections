import java.util.*;

public class CollectionsClass {
    public static void main(String[] args) {
        List<Integer> list1 = new ArrayList<Integer>();

        list1.add(4);
        list1.add(4);
        list1.add(1);
        list1.add(2);
        list1.add(3);
        System.out.println(list1);
        List<Integer> list2 = new ArrayList<>();
        list2.add(5);
        list2.add(7);
        list2.add(9);
        Collections.copy(list1, list2);
        System.out.println(list2);
        System.out.println(list1);
        System.out.println(Collections.binarySearch(list1, 3));
        List list3 = new ArrayList();
        Collection collection = Collections.checkedCollection(list3, Integer.class);
        collection.add(755);
        collection.add(55);
        System.out.println(list3);
        System.out.println(Collections.disjoint(list1, list2));
        System.out.println(Collections.disjoint(list1, list3));
        List<Object> objects = Collections.emptyList();
        Collections.fill(list3, 700);
        list1.add(5);
        list1.add(7);
        list1.add(9);
        System.out.println(list3);
        System.out.println(list1);
        System.out.println(list2);
        System.out.println(Collections.frequency(list1, 5));
        System.out.println(Collections.indexOfSubList(list1, list2));
        System.out.println(Collections.lastIndexOfSubList(list1, list2));
        System.out.println(list1);
        System.out.println(Collections.max(list1));
        System.out.println(Collections.min(list1));
        List<String> name = Collections.nCopies(3, "name");
        System.out.println(name);
        SequencedMap<String, Boolean> map = new LinkedHashMap<>();
        SequencedSet<String> es = Collections.newSequencedSetFromMap(map);
        System.out.println(es);
        System.out.println(Collections.binarySearch(list1, 3));
        Collections.replaceAll(list1, 9, 4);
        System.out.println(list1);
        Collections.reverse(list1);
        System.out.println(list1);
        Comparator<Object> reverseComp = Collections.reverseOrder();
        Collections.sort(list1, reverseComp);
        System.out.println(list1);
        Collections.rotate(list1, -3);
        System.out.println(list1);
//        Collections.shuffle(list1);
       System.out.println(list1);
        Set<String> set = Collections.singleton("key1");
       // set.add("key2");
        System.out.println(set);
        Collections.swap(list1, 1, 4);
        System.out.println(list1);
        Collections.synchronizedCollection(list1);
        list1.add(100);
        List<Integer> list = Collections.unmodifiableList(list1);
        System.out.println("l: " + list);
        list.add(100);
        System.out.println(list);
    }
}